AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Digital Identity Passport Credential Issuer API

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
    Default: "cri-vpc"
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"
  DevEnvironment:
    Type: String
    Description: >
      To support unique VPC config on cri-dev
    Default: "all-other-env"
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  AuditEventNamePrefix:
    Description: "The audit event name prefix"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/AuditEventNamePrefix"
  CriIdentifier:
    Description: "The unique credential issuer identifier"
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/common-cri-parameters/CriIdentifier"
  CommonStackName:
    Description: "The name of the stack containing the common CRI lambdas/infra"
    Type: String
    Default: "common-cri-api"

Conditions:
  CreateDevResources: !Equals
    - !Ref Environment
    - dev
  IsProdEnvironment: !Equals
    - !Ref Environment
    - production
  #  IsProdLikeEnvironment: !Or
  #    - !Equals [ !Ref Environment, staging ]
  #    - !Equals [ !Ref Environment, integration ]
  #    - !Equals [ !Ref Environment, production ]
  IsDevEnvironment: !Equals
    - !Ref Environment
    - dev
  IsNotDevEnvironment: !Not
    - Condition: IsDevEnvironment
  IsNotCRIDevEnv:
    Fn::Not:
      - Fn::Equals:
          - !Ref DevEnvironment
          - "cri-dev"
  UsingCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  AddProvisionedConcurrency: !Not
    - !Equals
      - !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
      -  0
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UsingCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Timeout: 40
    MemorySize: !FindInMap [ MemorySizeMapping, Environment, !Ref 'Environment' ]
    Architectures:
      - arm64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        AWS_STACK_NAME: !Sub ${AWS::StackName}
        POWERTOOLS_LOG_LEVEL: INFO
        SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
        SQS_AUDIT_EVENT_PREFIX: !Ref AuditEventNamePrefix
        POWERTOOLS_METRICS_NAMESPACE: !Ref CriIdentifier
        COMMON_PARAMETER_NAME_PREFIX: !Ref CommonStackName
        ENVIRONMENT: !Ref Environment

Mappings:

  MaximumAttemptCountMapping:
    Environment:
      dev: 2
      build: 2
      staging: 2
      integration: 2
      production: 2

  DvaDigitalEnabledMapping:
    Environment:
      dev: "false"
      build: "false"
      staging: "false"
      integration: "false"
      production: "false"

  ProvisionedConcurrency:
    Environment:
      dev: 0
      build: 0
      staging: 1
      integration: 1
      production: 1

  MemorySizeMapping:
    Environment:
      dev: 512
      build: 1024
      staging: 1024
      integration: 1024
      production: 2048

  VcExpiryRemoved:
    Environment:
      dev: "true"
      build: "true"
      staging: "true"
      integration: "true"
      production: "true"

  # VC Only
  MaxJwtTtlMapping:
    Environment:
      dev: "2"
      build: "2"
      staging: "6"
      integration: "6"
      production: "6"

  # VC Permitted values: SECONDS,MINUTES,HOURS,DAYS,MONTHS,YEARS
  JwtTtlUnitMapping:
    Environment:
      dev: MONTHS
      build: MONTHS
      staging: MONTHS
      integration: MONTHS
      production: MONTHS

Resources:

####################################################################
#                                                                  #
# API Gateway                                                      #
#                                                                  #
####################################################################

  PublicUKPassportAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub ${AWS::StackName}-PublicUKPassportApi
      Description: Public UK Passport CRI API
      StageName: !Ref Environment
      Auth:
        ApiKeyRequired: true
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          # Disable data trace in production to avoid logging customer sensitive information
          DataTraceEnabled: !If [IsProdEnvironment, false, true]
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !GetAtt PublicUKPassportAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: { } # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './public-api.yaml'
        components:
          schemas:
            TokenResponse:
              title: AccessToken
              required:
                - "access_token"
                - "expires_in"
              type: "object"
              properties:
                access_token:
                  type: string
                  description: The Access Token for the given token request.
                token_type:
                  type: string
                  description: The Token Type issued.
                  example: Bearer
                expires_in:
                  type: string
                  description: The expiry time, in seconds.
                  example: '3600'
                refresh_token:
                  type: string
                  description: The refresh token is optional, not currently applicable.
            Error:
              title: "Error Schema"
              type: "object"
              properties:
                message:
                  type: "string"
          securitySchemes:
            !If
            - IsNotDevEnvironment
            -
              api_key:
                type: "apiKey"
                name: "x-api-key"
                in: "header"
            - !Ref "AWS::NoValue"
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  PublicUKPassportAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${PublicUKPassportAPI}-public-AccessLogs
      RetentionInDays: 365
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  # PublicUKPassportAPILogGroupSubscriptionFilter:
  #   Type: AWS::Logs::SubscriptionFilter
  #   Condition: IsNotDevEnvironment
  #   Properties:
  #     DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
  #     FilterPattern: ""
  #     LogGroupName: !Ref PublicUKPassportAPILogGroup

  PrivateUKPassportAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub ${AWS::StackName}-PrivateUKPassportApi
      Description: Private UK Passport CRI API
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          # Disable data trace in production to avoid logging customer sensitive information
          DataTraceEnabled: !If [IsProdEnvironment, false, true]
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !GetAtt PrivateUKPassportAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      StageName: !Ref Environment
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: { } # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './private-api.yaml'
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: !If [IsNotDevEnvironment, PRIVATE, REGIONAL]
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Action: 'execute-api:Invoke'
              Effect: Allow
              Principal: '*'
              Resource:
                - 'execute-api:/*'
            - Action: 'execute-api:Invoke'
              Effect: !If [IsNotDevEnvironment, Deny, Allow]
              Principal: '*'
              Resource:
                - 'execute-api:/*'
              Condition:
                StringNotEquals:
                  aws:SourceVpce: !If
                    - CreateDevResources
                    - vpce-082cab7c78139eb54
                    - Fn::ImportValue:
                        !Sub "${VpcStackName}-ExecuteApiGatewayEndpointId"

  PrivateUKPassportAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${PrivateUKPassportAPI}-private-AccessLogs
      RetentionInDays: 365
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  # PrivateUKPassportAPILogGroupSubscriptionFilter:
  #   Type: AWS::Logs::SubscriptionFilter
  #   Condition: IsNotDevEnvironment
  #   Properties:
  #     DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
  #     FilterPattern: ""
  #     LogGroupName: !Ref PrivateUKPassportAPILogGroup

####################################################################
#                                                                  #
# Check Passport Function                                          #
#                                                                  #
####################################################################

  CheckPassportFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      # CheckPassport uses ProtectedSubnets as it needs to reach a third party api
      VpcConfig:
        !If
        - IsNotCRIDevEnv
        - SecurityGroupIds:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
          SubnetIds:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-ProtectedSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-ProtectedSubnetIdB"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-ProtectedSubnetIdC"
        - SecurityGroupIds:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-LambdaSecurityGroup"
          SubnetIds:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
      Handler: uk.gov.di.ipv.cri.passport.checkpassport.handler.CheckPassportHandler::handleRequest
      Runtime: java11
      CodeUri: ../../lambdas/checkpassport
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-checkpassport"
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBWritePolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBWritePolicy:
            TableName: !Ref DocumentCheckResultTable
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DocumentCheckResultTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/MaximumAttemptCount"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DvaDigitalEnabled"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/PostUrl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/HttpClient/TLSCert"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/HttpClient/TLSKey"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/HttpClient/TLSRootCertificate"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/HttpClient/TLSIntermediateCertificate"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/JWS/SigningCertForDcsToVerify"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/JWS/SigningKeyForPassportToSign"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/JWE/EncryptionCertForPassportToEncrypt"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/JWE/SigningCertForPassportToVerify"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DCS/JWE/EncryptionKeyForPassportToDecrypt"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/TLSCert"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/TLSKey"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/TLSRootCertificate"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/TLSIntermediateCertificate"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/clientId"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/clientSecret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/apiKey"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/apiEndpointUrl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/userAgent"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/HMPODVAD/HttpClient/secret"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/isPerformanceStub"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/logDcsResponse"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/PersonIdentityTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTtl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/verifiable-credential/issuer"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  CheckPassportFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CheckPassportFunction}"
      RetentionInDays: 30

  # CheckPassportFunctionLogGroupSubscriptionFilterCsls:
  #   Type: AWS::Logs::SubscriptionFilter
  #   Condition: IsNotDevEnvironment
  #   Properties:
  #     DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
  #     FilterPattern: ""
  #     LogGroupName: !Ref CheckPassportFunctionLogGroup

  CheckPassportFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CheckPassportFunction.Arn
      Principal: apigateway.amazonaws.com

####################################################################
#                                                                  #
# Issue Credential Function                                        #
#                                                                  #
####################################################################

  IssueCredentialFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.issuecredential.handler.IssueCredentialHandler::handleRequest
      Runtime: java11
      CodeUri: ../../lambdas/issuecredential
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-issuecredential"
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/PersonIdentityTableName}}"
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentCheckResultTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients/*"
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource: !ImportValue core-infrastructure-CriVcSigningKey1Arn
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/release-flags/vc-expiry-removed"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/DocumentCheckResultTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/MaxJwtTtl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/JwtTtlUnit"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/verifiableCredentialKmsSigningKeyId"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/PersonIdentityTableName"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/verifiable-credential/issuer"
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  IssueCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IssueCredentialFunction}"
      RetentionInDays: 30

  # IssueCredentialFunctionLogGroupSubscriptionFilterCsls:
  #   Type: AWS::Logs::SubscriptionFilter
  #   Condition: IsNotDevEnvironment
  #   Properties:
  #     DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
  #     FilterPattern: ""
  #     LogGroupName: !Ref IssueCredentialFunctionLogGroup

  IssueCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IssueCredentialFunction.Arn
      Principal: apigateway.amazonaws.com

####################################################################
#                                                                  #
# Database Tables                                                  #
#                                                                  #
####################################################################

  DocumentCheckResultTable:
    Type: "AWS::DynamoDB::Table" # enable encryption with customer managed kms key. Will need new kms key
    Properties:
      TableName: !Sub "document-check-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "sessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "sessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

####################################################################
#                                                                  #
# API config                                                       #
#                                                                  #
####################################################################

  PublicUKPassportAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - PublicUKPassportAPIStage
    Properties:
      ApiStages:
        - ApiId: !Ref PublicUKPassportAPI
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        BurstLimit: 100 # requests the API can handle concurrently
        RateLimit: 50 # allowed requests per second

  PrivateUKPassportAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - PrivateUKPassportAPIStage
    Properties:
      ApiStages:
        - ApiId: !Ref PrivateUKPassportAPI
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        BurstLimit: 100 # requests the API can handle concurrently
        RateLimit: 50 # allowed requests per second

  LinkUsagePlanApiKey1:
    #Condition: IsNotDevEnvironment
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey1
      KeyType: API_KEY
      UsagePlanId: !Ref PublicUKPassportAPIUsagePlan

  LinkUsagePlanApiKey2:
    #Condition: IsNotDevEnvironment
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey2
      KeyType: API_KEY
      UsagePlanId: !Ref PublicUKPassportAPIUsagePlan

####################################################################
#                                                                  #
# Parameters                                                       #
#                                                                  #
####################################################################

  ParameterReleaseFlagsVcExpiryRemoved:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - IsDevEnvironment
        - !Sub "/${AWS::StackName}/release-flags-vc-expiry-removed-not-used-in-dev"
        - !Sub "/release-flags/vc-expiry-removed"
      Value: !FindInMap [ VcExpiryRemoved, Environment, !Ref Environment ]
      Type: String
      Description: Expiry date release toggle

  ParameterDocumentCheckResultTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/DocumentCheckResultTableName"
      Value: !Sub document-check-${AWS::StackName}
      Type: String
      Description: Document check result dynamodb table name

  MaximumAttemptCountParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/MaximumAttemptCount"
      Value: !FindInMap [MaximumAttemptCountMapping, Environment, !Ref 'Environment']
      Type: String
      Description: maximum passport verification attempts

  DvaDigitalEnabledParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/DvaDigitalEnabled"
      Value: !FindInMap [DvaDigitalEnabledMapping, Environment, !Ref 'Environment']
      Type: String
      Description: use DCS for document checks

  MaxJwtTtlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/MaxJwtTtl"
      Type: String
      Value: !FindInMap [MaxJwtTtlMapping, Environment, !Ref 'Environment']
      Description: default time to live for a JWT in units of JwtTtlUnit

  JwtTtlUnitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/JwtTtlUnit"
      Type: String
      Value: !FindInMap [ JwtTtlUnitMapping, Environment, !Ref 'Environment' ]
      Description: The unit for the time-to-live for an JWT e.g. (MONTHS)

  VerifiableCredentialKmsSigningKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/verifiableCredentialKmsSigningKeyId"
      Type: String
      Value: !ImportValue core-infrastructure-CriVcSigningKey1Id
      Description: Verifiable Credential Key Id

  IsPerformanceStubParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/isPerformanceStub"
      Type: String
      Value: "false"
      Description: Feature toggle to allow performance testing passed SSL

  logDcsResponseParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/logDcsResponse"
      Type: String
      Value: "false"
      Description: Feature toggle to allow logging of DCS responses

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

####################################################################
#                                                                  #
# Alerts                                                           #
#                                                                  #
####################################################################
# TODO Re-enable after unique alarm topic url is added for passport-api
#  PassportLambdaErrors:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: !Sub Passport ${Environment} lambda errors
#      ActionsEnabled: true
#      AlarmActions:
#        - !Ref AlarmTopicPassport
#      OKActions:
#        - !Ref AlarmTopicPassport
#      InsufficientDataActions: []
#      MetricName: Errors
#      Namespace: AWS/Lambda
#      Statistic: Sum
#      Dimensions: []
#      Period: 300
#      DatapointsToAlarm: 3
#      EvaluationPeriods: 3
#      Threshold: 1
#      ComparisonOperator: GreaterThanThreshold
#      TreatMissingData: notBreaching
#
#  PassportAPIGW5XXErrors:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: !Sub Passport ${Environment} API Gateway 5XX errors
#      ActionsEnabled: true
#      AlarmActions:
#        - !Ref AlarmTopicPassport
#      OKActions:
#        - !Ref AlarmTopicPassport
#      InsufficientDataActions: []
#      Dimensions: []
#      DatapointsToAlarm: 3
#      EvaluationPeriods: 3
#      Threshold: 1
#      ComparisonOperator: GreaterThanThreshold
#      TreatMissingData: notBreaching
#      Metrics:
#        - Id: e1
#          Label: Expression1
#          ReturnData: true
#          Expression: SUM(METRICS())
#        - Id: m1
#          ReturnData: false
#          MetricStat:
#            Metric:
#              Namespace: AWS/ApiGateway
#              MetricName: 5XXError
#              Dimensions:
#                - Name: ApiName
#                  Value: !Sub "${AWS::StackName}-PublicUKPassportApi"
#            Period: 300
#            Stat: Sum
#        - Id: m2
#          ReturnData: false
#          MetricStat:
#            Metric:
#              Namespace: AWS/ApiGateway
#              MetricName: 5XXError
#              Dimensions:
#                - Name: ApiName
#                  Value: !Sub "${AWS::StackName}-PrivateUKPassportApi"
#            Period: 300
#            Stat: Sum
#
#  PassportAPIGW4XXErrors:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: !Sub Passport ${Environment} API Gateway 4XX errors
#      ActionsEnabled: true
#      AlarmActions:
#        - !Ref AlarmTopicPassport
#      OKActions:
#        - !Ref AlarmTopicPassport
#      InsufficientDataActions: []
#      Dimensions: []
#      DatapointsToAlarm: 3
#      EvaluationPeriods: 3
#      Threshold: 2
#      ComparisonOperator: GreaterThanThreshold
#      TreatMissingData: notBreaching
#      Metrics:
#        - Id: e1
#          Label: Expression1
#          ReturnData: true
#          Expression: SUM(METRICS())
#        - Id: m1
#          ReturnData: false
#          MetricStat:
#            Metric:
#              Namespace: AWS/ApiGateway
#              MetricName: 4XXError
#              Dimensions:
#                - Name: ApiName
#                  Value: !Sub "${AWS::StackName}-PublicUKPassportApi"
#            Period: 300
#            Stat: Sum
#        - Id: m2
#          ReturnData: false
#          MetricStat:
#            Metric:
#              Namespace: AWS/ApiGateway
#              MetricName: 4XXError
#              Dimensions:
#                - Name: ApiName
#                  Value: !Sub "${AWS::StackName}-PrivateUKPassportApi"
#            Period: 300
#            Stat: Sum

####################################################################
#                                                                  #
# Alarm setup                                                      #
#                                                                  #
####################################################################
# TODO unique pagerduty url needed for passport-api
#  AlarmTopicPassport:
#    Type: AWS::SNS::Topic
#    # checkov:skip=CKV_AWS_26: We will update this once basic alerting is available
#    Metadata:
#      SamResourceId: AlarmTopicPassport
#  AlarmTopicSubscriptionPagerDutyPassport:
#    Type: AWS::SNS::Subscription
#    Properties:
#      TopicArn:
#        Ref: AlarmTopicPassport
#      Endpoint:
#        Fn::Sub: '{{resolve:ssm:/alerting/pagerduty-passport/url}}'
#      Protocol: https
#    Metadata:
#      SamResourceId: AlarmTopicSubscriptionPagerDutyPassport
#  AlarmPublishToTopicPolicyPassport:
#    Type: AWS::SNS::TopicPolicy
#    Properties:
#      Topics:
#        - Ref: AlarmTopicPassport
#      PolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Action: sns:Publish
#            Resource:
#              Ref: AlarmTopicPassport
#            Principal:
#              Service: cloudwatch.amazonaws.com
#            Condition:
#              ArnLike:
#                AWS:SourceArn:
#                  Fn::Sub: arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
#    Metadata:
#      SamResourceId: AlarmPublishToTopicPolicyPassport

####################################################################
#                                                                  #
# Outputs                                                          #
#                                                                  #
####################################################################

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"

  UKPassportAPIGatewayID:
    Description: CRI UK Passport API Gateway ID
    Value: !Sub "${PublicUKPassportAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-PassportApiGatewayId

  PublicUKPassportAPIGatewayID:
    Description: CRI UK Passport Public API Gateway ID
    Value: !Sub "${PublicUKPassportAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-PublicUKPassportAPIGatewayID

  PublicUKPassportApiBaseUrl:
    Description: "Base url of the Public UK Passport API Gateway"
    Value: !Sub "https://${PublicUKPassportAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub ${AWS::StackName}-PublicUKPassportApiBaseUrl

  PrivateUKPassportAPIGatewayID:
    Description: CRI UK Passport Private API Gateway ID
    Value: !Sub "${PrivateUKPassportAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateUKPassportAPIGatewayID

  PrivateUKPassportApiBaseUrl:
    Description: "Base url of the Private UK Passport API Gateway"
    Value: !Sub "https://${PrivateUKPassportAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateUKPassportApiBaseUrl

  IpvCoreBackApiKeyId:
    Description: The key id of the api key used by IPV Core to access passport back external api gateway
    Value: !Ref LinkUsagePlanApiKey1
